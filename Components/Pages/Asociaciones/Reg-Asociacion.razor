@page "/formulario/registro-asociacion"
@page "/formulario/registro-asociacion/{Id:int}"
@layout EmptyLayout
@* @attribute [Authorize(Roles = "user_admin, user_estandar")] *@
@using Microsoft.AspNetCore.Authorization
@using REGISTROLEGAL.Components.Layout
@using REGISTROLEGAL.Models.LegalModels
@using REGISTROLEGAL.Repositories.Interfaces


<EditForm Model="@AModel" OnValidSubmit="@HandleValidSubmit" class="formulario-asociacion shadow-sm rounded p-4 bg-white">
    <DataAnnotationsValidator />
    <ValidationSummary Class="alert alert-danger mb-3 shadow-sm rounded" />

    @if (!string.IsNullOrEmpty(MensajeExito))
    {
        <div class="alert alert-success shadow-sm rounded">@MensajeExito</div>
    }

    @if (!string.IsNullOrEmpty(MensajeError))
    {
        <div class="alert alert-danger shadow-sm rounded">@MensajeError</div>
    }

    <h3 class="titulo-form">Registro de Asociación sin Fines de Lucro</h3>

    <!-- DATOS DE LA ASOCIACIÓN -->
    <fieldset class="bloque-form">
        <legend>Información de la Asociación</legend>
        <div class="row g-3">
            <div class="col-md-8 mb-3">
                <label class="form-label fw-semibold">Nombre de la Asociación</label>
                <InputText @bind-Value="AModel.NombreAsociacion" class="form-control" placeholder="Ej: Asociación de Vecinos San Miguelito" />
                <ValidationMessage For="@(() => AModel.NombreAsociacion)" class="text-danger small"/>
            </div>
            <div class="col-md-4 mb-3">
                <label class="form-label fw-semibold">Folio</label>
                <InputNumber @bind-Value="AModel.Folio" class="form-control" TValue="int" />
                <ValidationMessage For="@(() => AModel.Folio)" class="text-danger small"/>
            </div>
        </div>

        <div class="mb-3">
            <label class="form-label fw-semibold">Actividad de la Asociación</label>
            <InputText @bind-Value="AModel.Actividad" class="form-control" placeholder="Ej: Promoción de la educación" />
            <small class="form-text text-muted">Describa brevemente la actividad que realiza la asociación</small>
            <ValidationMessage For="@(() => AModel.Actividad)" class="text-danger small"/>
        </div>
    </fieldset>

    <!-- REPRESENTANTE LEGAL -->
    <fieldset class="bloque-form">
        <legend>Representante Legal</legend>
        <div class="row g-3">
            <div class="col-md-6 mb-3">
                <label class="form-label fw-semibold">Nombre</label>
                <InputText @bind-Value="AModel.NombreRepLegal" class="form-control" />
                <ValidationMessage For="@(() => AModel.NombreRepLegal)" class="text-danger small"/>
            </div>
            <div class="col-md-6 mb-3">
                <label class="form-label fw-semibold">Apellido</label>
                <InputText @bind-Value="AModel.ApellidoRepLegal" class="form-control" />
                <ValidationMessage For="@(() => AModel.ApellidoRepLegal)" class="text-danger small"/>
            </div>
            <div class="col-md-6 mb-3">
                <label class="form-label fw-semibold">Cédula</label>
                <InputText @bind-Value="AModel.CedulaRepLegal" class="form-control" />
                <ValidationMessage For="@(() => AModel.CedulaRepLegal)" class="text-danger small"/>
            </div>
            <div class="col-md-6 mb-3">
                <label class="form-label fw-semibold">Cargo</label>
                <InputText @bind-Value="AModel.CargoRepLegal" class="form-control" readonly />
                <small class="form-text text-muted">El cargo del representante legal siempre es Presidente</small>
            </div>
            <div class="col-md-6 mb-3">
                <label class="form-label fw-semibold">Teléfono</label>
                <InputText @bind-Value="AModel.TelefonoRepLegal" class="form-control" />
                <ValidationMessage For="@(() => AModel.TelefonoRepLegal)" class="text-danger small"/>
            </div>
            <div class="col-12 mb-3">
                <label class="form-label fw-semibold">Dirección</label>
                <InputText @bind-Value="AModel.DireccionRepLegal" class="form-control" />
                <ValidationMessage For="@(() => AModel.DireccionRepLegal)" class="text-danger small"/>
            </div>
        </div>
    </fieldset>

    <!-- APODERADO LEGAL -->
    <fieldset class="bloque-form">
        <legend>Apoderado Legal</legend>
        <div class="row g-3">
            <div class="col-md-6 mb-3">
                <label class="form-label fw-semibold">Nombre</label>
                <InputText @bind-Value="AModel.NombreApoAbogado" class="form-control" />
                <ValidationMessage For="@(() => AModel.NombreApoAbogado)" class="text-danger small"/>
            </div>
            <div class="col-md-6 mb-3">
                <label class="form-label fw-semibold">Apellido</label>
                <InputText @bind-Value="AModel.ApellidoApoAbogado" class="form-control" />
                <ValidationMessage For="@(() => AModel.ApellidoApoAbogado)" class="text-danger small"/>
            </div>
            <div class="col-md-6 mb-3">
                <label class="form-label fw-semibold">Cédula</label>
                <InputText @bind-Value="AModel.CedulaApoAbogado" class="form-control" />
                <ValidationMessage For="@(() => AModel.CedulaApoAbogado)" class="text-danger small"/>
            </div>
            <div class="col-md-6 mb-3">
                <label class="form-label fw-semibold">Teléfono</label>
                <InputText @bind-Value="AModel.TelefonoApoAbogado" class="form-control" />
                <ValidationMessage For="@(() => AModel.TelefonoApoAbogado)" class="text-danger small"/>
            </div>
            <div class="col-md-6 mb-3">
                <label class="form-label fw-semibold">Correo</label>
                <InputText @bind-Value="AModel.CorreoApoAbogado" class="form-control" type="email" />
                <ValidationMessage For="@(() => AModel.CorreoApoAbogado)" class="text-danger small"/>
            </div>
            <div class="col-12 mb-3">
                <label class="form-label fw-semibold">Dirección</label>
                <InputText @bind-Value="AModel.DireccionApoAbogado" class="form-control" />
                <ValidationMessage For="@(() => AModel.DireccionApoAbogado)" class="text-danger small"/>
            </div>
            <div class="col-12 mb-3">
                <div class="form-check">
                    <InputCheckbox @bind-Value="AModel.PerteneceAFirma" class="form-check-input" id="perteneceFirma" />
                    <label class="form-check-label" for="perteneceFirma">¿El apoderado pertenece a una firma de abogados?</label>
                </div>
            </div>
        </div>

        @if (AModel.PerteneceAFirma)
        {
            <fieldset class="bloque-form mt-3">
                <legend>Firma de Abogados</legend>
                <div class="row g-3">
                    <div class="col-md-6 mb-3">
                        <label class="form-label fw-semibold">Nombre de la Firma</label>
                        <InputText @bind-Value="AModel.NombreFirma" class="form-control" />
                        <ValidationMessage For="@(() => AModel.NombreFirma)" class="text-danger small"/>
                    </div>
                    <div class="col-md-6 mb-3">
                        <label class="form-label fw-semibold">Correo de la Firma</label>
                        <InputText @bind-Value="AModel.CorreoFirma" class="form-control" type="email" />
                        <ValidationMessage For="@(() => AModel.CorreoFirma)" class="text-danger small"/>
                    </div>
                    <div class="col-md-6 mb-3">
                        <label class="form-label fw-semibold">Teléfono de la Firma</label>
                        <InputText @bind-Value="AModel.TelefonoFirma" class="form-control" />
                        <ValidationMessage For="@(() => AModel.TelefonoFirma)" class="text-danger small"/>
                    </div>
                    <div class="col-12 mb-3">
                        <label class="form-label fw-semibold">Dirección de la Firma</label>
                        <InputText @bind-Value="AModel.DireccionFirma" class="form-control" />
                        <ValidationMessage For="@(() => AModel.DireccionFirma)" class="text-danger small"/>
                    </div>
                </div>
            </fieldset>
        }
    </fieldset>

    <div class="mb-3">
        <label class="form-label">Numero de Resolución</label>
        <InputText @bind-Value="AModel.NumeroResolucion" class="form-control" />
        <ValidationMessage For="@(() => AModel.NumeroResolucion)" class="text-danger small"/>
    </div>
    <div class="mb-3">
        <label class="form-label">Fecha de Resolución</label>
        <InputDate @bind-Value="AModel.FechaResolucion" class="form-control" />
        <ValidationMessage For="@(() => AModel.FechaResolucion)" class="text-danger small"/>
    </div>

    <!-- Archivos -->
    <fieldset class="bloque-form">
        <legend>Resolución / Documentos</legend>
        <InputFile OnChange="CargarDocumentos" multiple class="form-control" />
        @if (AModel.DocumentosSubir.Any())
        {
            <ul class="list-group mt-2">
                @for (int i = 0; i < AModel.DocumentosSubir.Count; i++)
                {
                    <li class="list-group-item d-flex justify-content-between align-items-center" @key="AModel.DocumentosSubir[i].Name">
                        @AModel.DocumentosSubir[i].Name
                        <button type="button" class="btn btn-sm btn-danger" @onclick="() => RemoverDocumento(i)">Eliminar</button>
                    </li>
                }
            </ul>
        }
    </fieldset>

    <div class="d-grid gap-2 d-md-flex justify-content-md-end mt-4">
        <button type="submit" class="btn btn-primary px-4" disabled="@IsSubmitting">
            @(IsSubmitting ? "Registrando..." : "Registrar Asociación")
        </button>
        <button type="button" class="btn btn-outline-secondary px-4" @onclick="Cancelar" disabled="@IsSubmitting">
            Cancelar
        </button>
    </div>
</EditForm>


@code {
     [Parameter] public int? Id { get; set; }
    [Inject] private IRegistroAsociacion _RegistroAsociacionService { get; set; } = default!;
    [Inject] private ICommon _Commonservice { get; set; } = default!;
    [Inject] private NavigationManager Navigation { get; set; } = default!;
    [Inject] private IArchivoLegalService ArchivoLegalService { get; set; } = default!;

    private const long MAX_FILE_SIZE_BYTES = 50 * 1024 * 1024; // 50MB en bytes
    private readonly string[] _extensionesPermitidas = { ".pdf" };

    private string FormatFileSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB" };
        int order = 0;
        double len = bytes;
        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len = len / 1024;
        }

        return $"{len:0.##} {sizes[order]}";
    }

    private AsociacionModel AModel { get; set; } = new()
    {
        DocumentosSubir = new List<IBrowserFile>()
    };

    private bool IsSubmitting = false;
    private string MensajeExito = "";
    private string MensajeError = "";

    protected override void OnInitialized()
    {
        AModel.CargoRepLegal = "Presidente";
    }

    private async Task CargarDocumentos(InputFileChangeEventArgs e)
    {
        MensajeError = "";

        foreach (var file in e.GetMultipleFiles())
        {
            if (file.Size > MAX_FILE_SIZE_BYTES)
            {
                MensajeError += $"❌ '{file.Name}' excede 50MB. Tamaño: {FormatFileSize(file.Size)}\n";
                continue;
            }

            var extension = Path.GetExtension(file.Name).ToLower();
            if (extension != ".pdf")
            {
                MensajeError += $"❌ '{file.Name}' no es PDF.\n";
                continue;
            }

            AModel.DocumentosSubir.Add(file);
            Console.WriteLine($"✅ '{file.Name}' listo para subir. Tamaño: {FormatFileSize(file.Size)}");
        }

        StateHasChanged();
    }

    private void RemoverDocumento(int index)
    {
        if (index >= 0 && index < AModel.DocumentosSubir.Count)
            AModel.DocumentosSubir.RemoveAt(index);
    }

    private async Task HandleValidSubmit()
    {
        IsSubmitting = true;
        MensajeError = "";
        MensajeExito = "";

        try
        {
            Console.WriteLine($"📋 Iniciando proceso con {AModel.DocumentosSubir.Count} archivos");
            
            var resultado = await _RegistroAsociacionService.CrearAsociacion(AModel);
            if (!resultado.Success)
            {
                MensajeError = $"❌ Error al crear asociación: {resultado.Message}";
                IsSubmitting = false;
                StateHasChanged();
                return;
            }

            AModel.AsociacionId = resultado.AsociacionId;
            Console.WriteLine($"✅ Asociación creada ID: {AModel.AsociacionId}");
            
            var erroresArchivos = new List<string>();

            if (AModel.DocumentosSubir?.Any() == true)
            {
                foreach (var archivo in AModel.DocumentosSubir)
                {
                    Console.WriteLine($"⬆️ Subiendo: {archivo.Name}");

                    var archivoRes = await ArchivoLegalService.GuardarArchivoAsociacionAsync(
                        AModel.AsociacionId,
                        archivo,
                        "DocumentosAsociacion"
                    );

                    if (archivoRes == null || !archivoRes.Success)
                    {
                        var errorMsg = $"❌ {archivo.Name}: {archivoRes?.Message ?? "Error desconocido"}";
                        erroresArchivos.Add(errorMsg);
                    }
                    else
                    {
                        Console.WriteLine($"✅ {archivo.Name} subido exitosamente");
                    }
                }
            }
            
            if (erroresArchivos.Any())
            {
                MensajeError = string.Join("\n", erroresArchivos);
                IsSubmitting = false;
                StateHasChanged();
            }
            else
            {
                MensajeExito = "✅ Registro completado exitosamente!";
                StateHasChanged();
                
                await Task.Delay(1500);
                Navigation.NavigateTo("/admin/listado");
            }
        }
        catch (Exception ex)
        {
            MensajeError = $"💥 Error: {ex.Message}";
            Console.WriteLine($"💥 Error crítico: {ex}");
            IsSubmitting = false;
            StateHasChanged();
        }
    }

    private void Cancelar() => Navigation.NavigateTo("/admin/listado");
}