@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using REGISTROLEGAL.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Iniciar Sesión</PageTitle>

<div class="min-vh-100 d-flex align-items-center justify-content-center bg-info">
    <div class="card shadow-lg border-0 rounded-3" style="max-width: 420px; width: 100%;">
        <div class="card-body p-4">
            <div class="text-center mb-4">
                <img src="favicon.png" alt="Logo" width="60" class="mb-2" />
                <h3 class="fw-bold text-dark">Sistema Legal</h3>
                <p class="text-muted mb-0">Acceso de Usuarios</p>
            </div>

            <StatusMessage Message="@errorMessage" />

            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger small" role="alert" />

                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Email" class="form-control rounded-3" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                    <label>Email</label>
                    <ValidationMessage For="() => Input.Email" class="text-danger small" />
                </div>

                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.Password" class="form-control rounded-3" autocomplete="current-password" aria-required="true" placeholder="password" />
                    <label>Contraseña</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger small" />
                </div>

                <div class="form-check mb-3">
                    <InputCheckbox @bind-Value="Input.RememberMe" class="form-check-input" id="rememberMe" />
                    <label for="rememberMe" class="form-check-label">Recordarme</label>
                </div>

                <div class="d-grid">
                    <button type="submit" class="btn btn-primary btn-lg rounded-3 shadow-sm">Iniciar Sesión</button>
                </div>

                @* <div class="text-center mt-4"> *@
                @*     <a href="Account/ForgotPassword" class="d-block text-decoration-none mb-2">¿Olvidó su contraseña?</a> *@
                @*     <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))"  *@
                @*        class="d-block text-decoration-none mb-2">Registrar nuevo usuario</a> *@
                @*     <a href="Account/ResendEmailConfirmation" class="d-block text-decoration-none">Reenviar confirmación de correo</a> *@
                @* </div> *@
            </EditForm>
        </div>
    </div>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("Usuario inició sesión.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("Cuenta bloqueada.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Intento de inicio de sesión inválido.";
        }
    }

    private sealed class InputModel
    {
        [Required] [EmailAddress] public string Email { get; set; } = "";
        [Required] [DataType(DataType.Password)] public string Password { get; set; } = "";
        [Display(Name = "Recordarme")] public bool RememberMe { get; set; }
    }
}
