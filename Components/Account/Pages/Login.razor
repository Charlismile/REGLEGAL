@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using REGISTROLEGAL.Data
@using REGISTROLEGAL.Repositories.Interfaces
@using REGISTROLEGAL.Models.LegalModels

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject ICommon CommonService
@inject IUserData UserDataService

<PageTitle>Iniciar Sesión</PageTitle>

<div class="container">
    <section>
        <EditForm Model="LoginData" method="post" OnValidSubmit="LoginUser" FormName="login">
            <div class="card mx-auto" style="width: min(400px, 100%);">
                <div class="card-header bg-white text-center">
                    <img src="favicon.png" class="img-fluid" alt="logo gobierno" height="120"
                         style="height: 120px">
                </div>
                <div class="card-body">
                    <DataAnnotationsValidator/>
                    <StatusMessage Message="@errorMessage"/>
                    <ValidationSummary class="text-danger" role="alert"/>
                    <div class="form-floating mb-3">
                        <InputText @bind-Value="LoginData.Email" class="form-control form-control-sm"
                                   autocomplete="username"
                                   aria-required="true" placeholder="correo@minsa.gob.pa"/>
                        <label for="email" class="form-label">Correo</label>
                        <ValidationMessage For="() => LoginData.Email" class="text-danger"/>
                    </div>
                    <div class="form-floating mb-3">
                        <InputText type="password" @bind-Value="LoginData.Password" class="form-control form-control-sm"
                                   autocomplete="current-password" aria-required="true" placeholder="contraseña"/>
                        <label for="password" class="form-label">Contraseña</label>
                        <ValidationMessage For="() => LoginData.Password" class="text-danger"/>
                    </div>
                    <div class="checkbox mb-3">
                        <label class="form-label">
                            <InputCheckbox @bind-Value="LoginData.RememberMe"
                                           class="darker-border-checkbox form-check-input"/>
                            ¿Recordar cuenta?
                        </label>
                    </div>
                </div>
                <div class="card-footer">
                    <div>
                        @if (IsAccessing)
                        {
                            <button class="w-100 btn btn-lg btn-gob-blue text-white" type="button" disabled>
                                <span class="spinner-grow spinner-grow-sm" aria-hidden="true"></span>
                                <span role="status">Accediendo...</span>
                            </button>
                        }
                        else
                        {
                            <button type="submit" class="w-100 btn btn-lg btn-success text-white">
                                <i
                                    class="fa-solid fa-right-to-bracket"></i> Acceder
                            </button>
                        }
                    </div>
                </div>
            </div>
        </EditForm>
    </section>
</div>

@code {
    private string? errorMessage;
    private bool IsAccessing { get; set; } = false;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm] private LoginModel LoginData { get; set; } = new();

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        IsAccessing = false;
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        IsAccessing = true;
        errorMessage = "";
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var UserData = await UserManager.FindByEmailAsync(LoginData.Email);
        if (UserData == null)
        {
            errorMessage = "Error: El usuario no esta registrado en el sistema.";
            IsAccessing = false;
            return;
        }

        ResultModel resultado = await UserDataService.LoginAD(LoginData.Email, LoginData.Password);
        if (!resultado.Success)
        {
            errorMessage = "Error: No indico el token o hubo un problema con el active directory";
            IsAccessing = false;
            return;
        }

        string Password = await CommonService.GetFakePassword();
        var result = await SignInManager.PasswordSignInAsync(LoginData.Email, Password, LoginData.RememberMe, lockoutOnFailure: true);
        if (result.Succeeded)
        {
            UserData.LastLoginDate = DateTime.Now;
            await UserManager.UpdateAsync(UserData);
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo("/Dashboard");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
            IsAccessing = false;
        }
    }

    private sealed class LoginModel
    {
        [Required(ErrorMessage = "El correo es requerido.")]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "La contraseña es requerida.")]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "¿Recordar cuenta?")] public bool RememberMe { get; set; }
    }

}